/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package expeditors.backend.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Pet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2334258709413266215L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pet\",\"namespace\":\"expeditors.backend.avro\",\"fields\":[{\"name\":\"pet_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of Animal\"},{\"name\":\"pet_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Pet Name, if known\",\"default\":\"\"},{\"name\":\"pet_breed\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Pet Breed, if known (e.g. siamese, dalmation)\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Pet> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Pet> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Pet> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Pet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Pet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Pet to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Pet from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Pet instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Pet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of Animal */
  private java.lang.String pet_type;
  /** Pet Name, if known */
  private java.lang.String pet_name;
  /** Pet Breed, if known (e.g. siamese, dalmation) */
  private java.lang.String pet_breed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Pet() {}

  /**
   * All-args constructor.
   * @param pet_type Type of Animal
   * @param pet_name Pet Name, if known
   * @param pet_breed Pet Breed, if known (e.g. siamese, dalmation)
   */
  public Pet(java.lang.String pet_type, java.lang.String pet_name, java.lang.String pet_breed) {
    this.pet_type = pet_type;
    this.pet_name = pet_name;
    this.pet_breed = pet_breed;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pet_type;
    case 1: return pet_name;
    case 2: return pet_breed;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pet_type = value$ != null ? value$.toString() : null; break;
    case 1: pet_name = value$ != null ? value$.toString() : null; break;
    case 2: pet_breed = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'pet_type' field.
   * @return Type of Animal
   */
  public java.lang.String getPetType() {
    return pet_type;
  }


  /**
   * Sets the value of the 'pet_type' field.
   * Type of Animal
   * @param value the value to set.
   */
  public void setPetType(java.lang.String value) {
    this.pet_type = value;
  }

  /**
   * Gets the value of the 'pet_name' field.
   * @return Pet Name, if known
   */
  public java.lang.String getPetName() {
    return pet_name;
  }


  /**
   * Sets the value of the 'pet_name' field.
   * Pet Name, if known
   * @param value the value to set.
   */
  public void setPetName(java.lang.String value) {
    this.pet_name = value;
  }

  /**
   * Gets the value of the 'pet_breed' field.
   * @return Pet Breed, if known (e.g. siamese, dalmation)
   */
  public java.lang.String getPetBreed() {
    return pet_breed;
  }


  /**
   * Sets the value of the 'pet_breed' field.
   * Pet Breed, if known (e.g. siamese, dalmation)
   * @param value the value to set.
   */
  public void setPetBreed(java.lang.String value) {
    this.pet_breed = value;
  }

  /**
   * Creates a new Pet RecordBuilder.
   * @return A new Pet RecordBuilder
   */
  public static expeditors.backend.avro.Pet.Builder newBuilder() {
    return new expeditors.backend.avro.Pet.Builder();
  }

  /**
   * Creates a new Pet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pet RecordBuilder
   */
  public static expeditors.backend.avro.Pet.Builder newBuilder(expeditors.backend.avro.Pet.Builder other) {
    if (other == null) {
      return new expeditors.backend.avro.Pet.Builder();
    } else {
      return new expeditors.backend.avro.Pet.Builder(other);
    }
  }

  /**
   * Creates a new Pet RecordBuilder by copying an existing Pet instance.
   * @param other The existing instance to copy.
   * @return A new Pet RecordBuilder
   */
  public static expeditors.backend.avro.Pet.Builder newBuilder(expeditors.backend.avro.Pet other) {
    if (other == null) {
      return new expeditors.backend.avro.Pet.Builder();
    } else {
      return new expeditors.backend.avro.Pet.Builder(other);
    }
  }

  /**
   * RecordBuilder for Pet instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pet>
    implements org.apache.avro.data.RecordBuilder<Pet> {

    /** Type of Animal */
    private java.lang.String pet_type;
    /** Pet Name, if known */
    private java.lang.String pet_name;
    /** Pet Breed, if known (e.g. siamese, dalmation) */
    private java.lang.String pet_breed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(expeditors.backend.avro.Pet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pet_type)) {
        this.pet_type = data().deepCopy(fields()[0].schema(), other.pet_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.pet_name)) {
        this.pet_name = data().deepCopy(fields()[1].schema(), other.pet_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pet_breed)) {
        this.pet_breed = data().deepCopy(fields()[2].schema(), other.pet_breed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Pet instance
     * @param other The existing instance to copy.
     */
    private Builder(expeditors.backend.avro.Pet other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.pet_type)) {
        this.pet_type = data().deepCopy(fields()[0].schema(), other.pet_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pet_name)) {
        this.pet_name = data().deepCopy(fields()[1].schema(), other.pet_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pet_breed)) {
        this.pet_breed = data().deepCopy(fields()[2].schema(), other.pet_breed);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'pet_type' field.
      * Type of Animal
      * @return The value.
      */
    public java.lang.String getPetType() {
      return pet_type;
    }


    /**
      * Sets the value of the 'pet_type' field.
      * Type of Animal
      * @param value The value of 'pet_type'.
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder setPetType(java.lang.String value) {
      validate(fields()[0], value);
      this.pet_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pet_type' field has been set.
      * Type of Animal
      * @return True if the 'pet_type' field has been set, false otherwise.
      */
    public boolean hasPetType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pet_type' field.
      * Type of Animal
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder clearPetType() {
      pet_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pet_name' field.
      * Pet Name, if known
      * @return The value.
      */
    public java.lang.String getPetName() {
      return pet_name;
    }


    /**
      * Sets the value of the 'pet_name' field.
      * Pet Name, if known
      * @param value The value of 'pet_name'.
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder setPetName(java.lang.String value) {
      validate(fields()[1], value);
      this.pet_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pet_name' field has been set.
      * Pet Name, if known
      * @return True if the 'pet_name' field has been set, false otherwise.
      */
    public boolean hasPetName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pet_name' field.
      * Pet Name, if known
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder clearPetName() {
      pet_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pet_breed' field.
      * Pet Breed, if known (e.g. siamese, dalmation)
      * @return The value.
      */
    public java.lang.String getPetBreed() {
      return pet_breed;
    }


    /**
      * Sets the value of the 'pet_breed' field.
      * Pet Breed, if known (e.g. siamese, dalmation)
      * @param value The value of 'pet_breed'.
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder setPetBreed(java.lang.String value) {
      validate(fields()[2], value);
      this.pet_breed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pet_breed' field has been set.
      * Pet Breed, if known (e.g. siamese, dalmation)
      * @return True if the 'pet_breed' field has been set, false otherwise.
      */
    public boolean hasPetBreed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pet_breed' field.
      * Pet Breed, if known (e.g. siamese, dalmation)
      * @return This builder.
      */
    public expeditors.backend.avro.Pet.Builder clearPetBreed() {
      pet_breed = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pet build() {
      try {
        Pet record = new Pet();
        record.pet_type = fieldSetFlags()[0] ? this.pet_type : (java.lang.String) defaultValue(fields()[0]);
        record.pet_name = fieldSetFlags()[1] ? this.pet_name : (java.lang.String) defaultValue(fields()[1]);
        record.pet_breed = fieldSetFlags()[2] ? this.pet_breed : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Pet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Pet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Pet>
    READER$ = (org.apache.avro.io.DatumReader<Pet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.pet_type);

    out.writeString(this.pet_name);

    out.writeString(this.pet_breed);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.pet_type = in.readString();

      this.pet_name = in.readString();

      this.pet_breed = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.pet_type = in.readString();
          break;

        case 1:
          this.pet_name = in.readString();
          break;

        case 2:
          this.pet_breed = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










