#Postgres
#spring.datasource.url=jdbc:postgresql://localhost:5432/larku
spring.datasource.url=jdbc:postgresql://localhost:5433/adoptapp
spring.datasource.username=larku
spring.datasource.password=${DB_PASSWORD}
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Tell Spring not to create the database
#Choice are 'never', 'embedded' and 'always'
spring.datasource.initialization-mode=always
#spring.sql.init.mode=never

#If we still want to have both Hibernate automatic schema
#generation in conjugation with script-based schema creation and data population
#This will ensure, that after Hibernate schema creation is performed
# hen additionally schema.sql is read for any additional schema changes
#and data.sql is executed to populate the database.
spring.jpa.defer-datasource-initialization=true
#spring.jpa.defer-datasource-initialization=false

#spring.sql.init.schema-locations = classpath:/sql/postgres/1-adoptapp-postgres_schema.sql
spring.sql.init.data-locations = classpath:/sql/postgres/2-adoptapp-postgres_data.sql

#ttl.sql.schema-file = /sql/postgres/1-adoptapp-postgres_schema.sql
#ttl.sql.data-file = /sql/postgres/2-adoptapp-postgres_data.sql

#################Tell Hibernate to Not make Schema########
#Does Hibernate generate the DDL (false for no)
#If this is not set to false, Hibernate may overwrite
#the work of schema.sql and data.sql
#spring.jpa.generate-ddl=true
#spring.jpa.generate-ddl=false
#If Hibernate, then a further switch is
# available to customize how Hibernate works
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.ddl-auto=create
#################End Hibernate######################


